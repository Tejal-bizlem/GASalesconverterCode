//package com.DashboardSales;
//
//import com.sun.jersey.core.util.Base64;
//import java.io.ByteArrayInputStream;
//import java.io.InputStream;
//import java.util.ArrayList;
//import java.util.Iterator;
//import org.apache.poi.ss.usermodel.Row;
//import org.apache.poi.xssf.usermodel.XSSFCell;
//import org.apache.poi.xssf.usermodel.XSSFRow;
//import org.apache.poi.xssf.usermodel.XSSFSheet;
//import org.apache.poi.xssf.usermodel.XSSFWorkbook;
//import org.json.JSONArray;
//import org.json.JSONObject;
//
//public class ReadExcel_OutCome {
//	public static void main(String[] args) {
//		String bs64 = "";
//		String nb54 = "";
//		String hj78 = "";
//		readexcel(hj78);
//		System.out.println("end");
//	}
//
//	public static JSONObject readexcel(String base64) {
//		JSONObject outcomejson = new JSONObject();
//
//		try {
//			byte[] bytes = Base64.decode(base64);
//			InputStream myInputStream = new ByteArrayInputStream(bytes);
//			XSSFWorkbook book = new XSSFWorkbook(myInputStream);
//			XSSFSheet sheet = book.getSheetAt(0);
//			Iterator<Row> rows = sheet.rowIterator();
//			ArrayList<String> parameters = new ArrayList();
//			ArrayList<String> actuallist = new ArrayList();
//			ArrayList<String> plannedlist = new ArrayList();
//			ArrayList<String> namelist = new ArrayList();
//			ArrayList<String> sourcelist = new ArrayList();
//			ArrayList<String> missedopplist = new ArrayList();
//			ArrayList<String> visitgreaterthanlist = new ArrayList();
//			ArrayList<String> visitlessthanlist = new ArrayList();
//			ArrayList<String> sessiongreaterthanlist = new ArrayList();
//			ArrayList<String> sessionlessthanlist = new ArrayList();
//			int parameterscol = 0;
//			int missedoppcol = 0;
//			int activeleadfilter = 0;
//			int actualcol = false;
//			int plannedcol = false;
//			Object var24 = null;
//
//			while (rows.hasNext()) {
//				XSSFRow row = (XSSFRow) rows.next();
//				Iterator cells = row.cellIterator();
//
//				while (cells.hasNext()) {
//					XSSFCell cell = (XSSFCell) cells.next();
//					if (row.getRowNum() == 0) {
//						System.out.println("Cell : : :" + cell.getStringCellValue());
//						if (cell.getStringCellValue().equals("Parameters")) {
//							parameterscol = cell.getColumnIndex();
//						}
//					}
//
//					if (row.getRowNum() == 3) {
//						System.out.println("Cell : : :" + cell.getStringCellValue());
//						if (cell.getStringCellValue().equals("Missed opportunities")) {
//							missedoppcol = cell.getColumnIndex();
//						}
//					}
//
//					if (row.getRowNum() == 3) {
//						System.out.println("Cell : : :" + cell.getStringCellValue());
//						if (cell.getStringCellValue().equals("Active lead Filters")) {
//							activeleadfilter = cell.getColumnIndex();
//						}
//					}
//
//					if (cell.getColumnIndex() == activeleadfilter + 1 && row.getRowNum() > 4 && row.getRowNum() < 9) {
//						switch (cell.getCellType()) {
//							case 0 :
//								System.out.println(
//										"Cell Numeric Greater than activefilter :" + cell.getNumericCellValue());
//								visitgreaterthanlist.add(String.valueOf(cell.getNumericCellValue()));
//								break;
//							case 1 :
//								System.out.println("Active greaterthan " + cell.getStringCellValue());
//							case 2 :
//							case 3 :
//						}
//					}
//
//					if (cell.getColumnIndex() == activeleadfilter + 2 && row.getRowNum() > 4 && row.getRowNum() < 9) {
//						switch (cell.getCellType()) {
//							case 0 :
//								System.out.println("Cell Numeric less tham activefilter:" + cell.getNumericCellValue());
//								visitlessthanlist.add(String.valueOf(cell.getNumericCellValue()));
//								break;
//							case 1 :
//								System.out.println("Active lessthan " + cell.getStringCellValue());
//							case 2 :
//							case 3 :
//						}
//					}
//
//					if (cell.getColumnIndex() == activeleadfilter + 1 && row.getRowNum() > 9) {
//						switch (cell.getCellType()) {
//							case 0 :
//								System.out.println("Cell Numeric Greater Than Session :" + cell.getNumericCellValue());
//								sessiongreaterthanlist.add(String.valueOf(cell.getNumericCellValue()));
//								break;
//							case 1 :
//								System.out.println("Session greaterthan " + cell.getStringCellValue());
//							case 2 :
//							case 3 :
//						}
//					}
//
//					if (cell.getColumnIndex() == activeleadfilter + 2 && row.getRowNum() > 9) {
//						switch (cell.getCellType()) {
//							case 0 :
//								System.out.println("Cell Numeric less than  Session :" + cell.getNumericCellValue());
//								sessionlessthanlist.add(String.valueOf(cell.getNumericCellValue()));
//								break;
//							case 1 :
//								System.out.println("Session lessthan " + cell.getStringCellValue());
//							case 2 :
//							case 3 :
//						}
//					}
//
//					if (cell.getColumnIndex() == missedoppcol && row.getRowNum() > 4) {
//						switch (cell.getCellType()) {
//							case 1 :
//								System.out.println(cell.getStringCellValue());
//								sourcelist.add(cell.getStringCellValue());
//							case 2 :
//							case 3 :
//						}
//					}
//
//					if (cell.getColumnIndex() == missedoppcol + 1 && row.getRowNum() > 4) {
//						switch (cell.getCellType()) {
//							case 0 :
//								missedopplist.add(String.valueOf(cell.getNumericCellValue()));
//								break;
//							case 1 :
//								System.out.println(cell.getStringCellValue());
//								missedopplist.add(cell.getStringCellValue());
//							case 2 :
//							default :
//								break;
//							case 3 :
//								System.out.println(" blank : ");
//						}
//					}
//
//					if (cell.getColumnIndex() == missedoppcol + 2 && row.getRowNum() > 4) {
//						switch (cell.getCellType()) {
//							case 0 :
//								namelist.add(String.valueOf(cell.getNumericCellValue()));
//								break;
//							case 1 :
//								namelist.add(cell.getStringCellValue());
//							case 2 :
//							default :
//								break;
//							case 3 :
//								System.out.println(" blank : ");
//						}
//					}
//
//					if (cell.getColumnIndex() > parameterscol && cell.getColumnIndex() < 2 && row.getRowNum() > 5) {
//						switch (cell.getCellType()) {
//							case 1 :
//								parameters.add(cell.getStringCellValue().trim());
//								System.out.println(cell.getStringCellValue().length());
//							case 2 :
//							case 3 :
//						}
//					}
//
//					if (cell.getColumnIndex() == 3 && row.getRowNum() > 5) {
//						switch (cell.getCellType()) {
//							case 0 :
//								if (cell.getNumericCellValue() != 0.0D) {
//									actuallist.add(String.valueOf(cell.getNumericCellValue()));
//								}
//								break;
//							case 1 :
//								System.out.println("Column value" + cell.getStringCellValue().trim());
//							case 2 :
//							case 3 :
//						}
//					}
//
//					if (cell.getColumnIndex() == 4 && row.getRowNum() >= 6) {
//						switch (cell.getCellType()) {
//							case 0 :
//								if (cell.getNumericCellValue() != 0.0D) {
//									plannedlist.add(String.valueOf(cell.getNumericCellValue()));
//								}
//							case 1 :
//							case 2 :
//							case 3 :
//						}
//					}
//				}
//			}
//
//			System.out.println(parameters);
//			System.out.println(actuallist.size());
//			System.out.println(plannedlist.size());
//			JSONArray parameterarray = new JSONArray();
//			JSONObject dataobj = null;
//			new JSONObject();
//			JSONArray missedobjarray = new JSONArray();
//			JSONObject mainjson = new JSONObject();
//			JSONArray visitarray = new JSONArray();
//			JSONArray sessionarray = new JSONArray();
//			JSONObject visitobj = null;
//			JSONObject sessionobj = null;
//			JSONObject activeleadsobj = new JSONObject();
//
//			int i;
//			for (i = 0; i < parameters.size(); ++i) {
//				dataobj = new JSONObject();
//				dataobj.put("Actual", ((String) actuallist.get(i)).replace(".0", ""));
//				dataobj.put("Planned", ((String) plannedlist.get(i)).replace(".0", ""));
//				dataobj.put("Parameter", ((String) parameters.get(i)).trim());
//				parameterarray.put(dataobj);
//			}
//
//			for (i = 0; i < sourcelist.size(); ++i) {
//				JSONObject missedobj = new JSONObject();
//				missedobj.put("reason", sourcelist.get(i));
//				missedobj.put("opp", missedopplist.get(i));
//				missedobj.put("name", namelist.get(i));
//				missedobjarray.put(missedobj);
//			}
//
//			for (i = 0; i < sessiongreaterthanlist.size(); ++i) {
//				sessionobj = new JSONObject();
//				sessionobj.put("lessthan", sessionlessthanlist.get(i));
//				sessionobj.put("greaterthan", sessiongreaterthanlist.get(i));
//				sessionarray.put(sessionobj);
//			}
//
//			for (i = 0; i < visitgreaterthanlist.size(); ++i) {
//				visitobj = new JSONObject();
//				visitobj.put("lessthan", visitlessthanlist.get(i));
//				visitobj.put("greaterthan", visitgreaterthanlist.get(i));
//				visitarray.put(visitobj);
//			}
//
//			activeleadsobj.put("visit", visitarray);
//			activeleadsobj.put("session", visitarray);
//			mainjson.put("mostActivrLead", activeleadsobj);
//			mainjson.put("missedOppurtinities", missedobjarray);
//			mainjson.put("outcome", parameterarray);
//			System.out.println("Mainjson : " + mainjson);
//		} catch (Exception var36) {
//			var36.printStackTrace();
//		}
//
//		return outcomejson;
//	}
//}